#!/usr/bin/env bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DOTFILES_REPO="https://github.com/heronsilva/dotfiles.git"
DOTFILES_DIR="$HOME/Workbench/dotfiles"
BACKUP_DIR="$HOME/.dotfiles_backup_$(date +%Y%m%d_%H%M%S)"

# Useful functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Detect operating system
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [[ -f /etc/arch-release ]]; then
            echo "arch"
        elif [[ -f /etc/debian_version ]]; then
            echo "debian"
        elif [[ -f /etc/redhat-release ]]; then
            echo "redhat"
        else
            echo "linux"
        fi
    else
        echo "unknown"
    fi
}

# Install prerequisites for macOS
install_macos_prerequisites() {
    log_info "Installing macOS prerequisites..."

    # Check for Xcode Command Line Tools
    if ! xcode-select -p >/dev/null 2>&1; then
        log_info "Installing Xcode Command Line Tools..."
        xcode-select --install
        log_warning "Please complete the Xcode Command Line Tools installation and run this script again."
        exit 1
    fi

    # Install Homebrew if not present
    if ! command_exists brew; then
        log_info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        # Add Homebrew to PATH
        if [[ -f /opt/homebrew/bin/brew ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        elif [[ -f /usr/local/bin/brew ]]; then
            eval "$(/usr/local/bin/brew shellenv)"
        fi
    fi

    log_success "macOS prerequisites installed"
}

# Install prerequisites for Linux
install_linux_prerequisites() {
    local distro=$1
    log_info "Installing Linux prerequisites for $distro..."

    case $distro in
        "arch")
            if ! command_exists git; then
                sudo pacman -Sy --noconfirm git
            fi
            ;;
        "debian")
            sudo apt update
            if ! command_exists git; then
                sudo apt install -y git
            fi
            ;;
        "redhat")
            sudo dnf update
            if ! command_exists git; then
                sudo dnf install -y git
            fi
            ;;
        *)
            log_warning "Unknown Linux distribution. Please ensure git is installed."
            ;;
    esac

    log_success "Linux prerequisites installed"
}

# Create backup of existing dotfiles
create_backup() {
    log_info "Creating backup of existing dotfiles..."

    local files_to_backup=(
        ".bashrc"
        ".bash_aliases"
        ".zshrc"
        ".zsh"
        ".vimrc"
        ".ideavimrc"
        ".gitconfig"
        ".tmux.conf"
        ".config/alacritty"
        ".config/wezterm"
        ".config/nvim"
        ".config/mise"
    )

    local backup_created=false

    for file in "${files_to_backup[@]}"; do
        if [[ -e "$HOME/$file" ]]; then
            if [[ ! $backup_created ]]; then
                mkdir -p "$BACKUP_DIR"
                backup_created=true
            fi

            # Create parent directory in backup if needed
            local parent_dir=$(dirname "$BACKUP_DIR/$file")
            mkdir -p "$parent_dir"

            cp -r "$HOME/$file" "$BACKUP_DIR/$file" 2>/dev/null || true
            log_info "Backed up $file"
        fi
    done

    if [[ $backup_created ]]; then
        log_success "Backup created at $BACKUP_DIR"
    else
        log_info "No existing dotfiles found to backup"
    fi
}

# Clone or update dotfiles repository
setup_repository() {
    log_info "Setting up dotfiles repository..."

    # Create Workbench directory if it doesn't exist
    mkdir -p "$HOME/Workbench"

    if [[ -d "$DOTFILES_DIR" ]]; then
        log_info "Dotfiles directory exists, updating..."
        cd "$DOTFILES_DIR"
        git pull origin main || git pull origin master || true
    else
        log_info "Cloning dotfiles repository..."
        git clone "$DOTFILES_REPO" "$DOTFILES_DIR"
        cd "$DOTFILES_DIR"
    fi

    log_success "Repository setup complete"
}

# Run the dotfiles installation
run_installation() {
    log_info "Running dotfiles installation..."

    cd "$DOTFILES_DIR"

    # Make install script executable
    chmod +x ./install

    # Run the installation
    ./install

    log_success "Dotfiles installation complete"
}

# Apply macOS system defaults
apply_macos_defaults() {
    log_info "Applying macOS system defaults..."

    if [[ -f "$DOTFILES_DIR/defaults/macos.sh" ]]; then
        bash "$DOTFILES_DIR/defaults/macos.sh"
    else
        log_warning "macOS defaults script not found, skipping..."
    fi
}

# Main installation function
main() {
    log_info "ðŸš€ Starting dotfiles installation..."
    log_info "Repository: $DOTFILES_REPO"
    log_info "Installation directory: $DOTFILES_DIR"

    # Detect operating system
    local os=$(detect_os)
    log_info "Detected OS: $os"

    # Install prerequisites
    case $os in
        "macos")
            install_macos_prerequisites
            ;;
        "arch"|"debian"|"redhat"|"linux")
            install_linux_prerequisites "$os"
            ;;
        *)
            log_error "Unsupported operating system: $os"
            exit 1
            ;;
    esac

    # Create backup
    create_backup

    # Setup repository
    setup_repository

    # Run installation
    run_installation

    # Apply OS-specific configurations
    if [[ $os == "macos" ]]; then
        apply_macos_defaults
    fi

    log_success "ðŸŽ‰ Dotfiles installation completed successfully!"
    log_info "Backup created at: $BACKUP_DIR"
    log_info "To restore from backup: cp -r $BACKUP_DIR/* ~/"

    # Suggest shell restart
    log_info "ðŸ’¡ Restart your shell or run 'source ~/.zshrc' to apply changes"
}

# Run main function
main "$@"
