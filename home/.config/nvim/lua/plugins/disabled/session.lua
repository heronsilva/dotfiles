return {}

-- return {
--     {
--         "folke/persistence.nvim",
--         event = "BufReadPre",
--         opts = {},
--         enabled = false,
--         keys = {
--             -- stylua: ignore start
--             { "<leader>qs", function() require("persistence").save() end, desc = "Save Session" },
--             { "<leader>ql", function() require("persistence").load() end, desc = "Restore Session" },
--             { "<leader>qS", function() require("persistence").select() end,desc = "Select Session" },
--             { "<leader>qd", function() require("persistence").stop() end, desc = "Don't Save Current Session" },
--             -- { "<leader>ql", function() require("persistence").load({ last = true }) end, desc = "Restore Last Session" },
--             -- stylua: ignore end
--         },
--     },
--
--     {
--         "rmagatti/auto-session",
--         enabled = false,
--         lazy = false,
--         ---@module "auto-session"
--         ---@type AutoSession.Config
--         opts = {
--             suppressed_dirs = { "~/", "~/Projects", "~/Downloads", "/" },
--             log_level = "debug",
--         },
--         config = function()
--             ---@type AutoSession.Config
--             local opts = {
--                 auto_save = true, -- default is true
--                 auto_restore = true,
--                 -- use_git_branch = true,
--                 -- auto_restore_last_session = true,
--                 cwd_change_handling = false,
--                 -- lazy_support = true,
--                 -- auto_restore_last_session = false,
--                 show_auto_restore_notif = true,
--                 allowed_dirs = {
--                     "~/Workbench",
--                 },
--                 args_allow_single_directory = false,
--             }
--
--             require("auto-session").setup()
--         end,
--     },
--
--     {
--         "Shatur/neovim-session-manager",
--         enabled = false,
--         config = function(_, opts)
--             local session_manager = require("session_manager")
--             local config = require("session_manager.config")
--
--             require("session_manager").setup({
--                 autoload_mode = config.AutoloadMode.LastSession,
--                 autosave_last_session = true,
--             })
--
--             -- Save the current session
--             vim.keymap.set("n", "<leader>qs", function()
--                 session_manager.save_current_session()
--                 vim.notify("Session saved! ðŸŽ¯")
--             end, { noremap = true, silent = true, desc = "Save session" })
--
--             -- Load the last session
--             vim.keymap.set("n", "<leader>ql", function()
--                 session_manager.load_last_session()
--             end, { noremap = true, silent = true, desc = "Load last session" })
--
--             -- Delete the current session
--             vim.keymap.set("n", "<leader>qd", function()
--                 session_manager.delete_session()
--             end, { noremap = true, silent = true, desc = "Delete session" })
--
--             -- Browse and load a session using Telescope
--             vim.keymap.set("n", "<leader>qb", function()
--                 require("session_manager").load_session(false)
--             end, { noremap = true, silent = true, desc = "Browse sessions" })
--
--             -- Auto save session
--             vim.api.nvim_create_autocmd({ "BufWritePre" }, {
--                 callback = function()
--                     for _, buf in ipairs(vim.api.nvim_list_bufs()) do
--                         -- Don't save while there's any 'nofile' buffer open.
--                         if vim.api.nvim_get_option_value("buftype", { buf = buf }) == "nofile" then
--                             return
--                         end
--                     end
--                     session_manager.save_current_session()
--                 end,
--             })
--
--             -- https://github.com/Shatur/neovim-session-manager?tab=readme-ov-file#autocommands
--             local config_group = vim.api.nvim_create_augroup("MyConfigGroup", {}) -- A global group for all your config autocommands
--             -- vim.api.nvim_create_autocmd({ "User" }, {
--             --     pattern = "SessionLoadPost",
--             --     group = config_group,
--             --     callback = function()
--             --         require("neo-tree.command").execute({
--             --             toggle = true,
--             --         })
--             --     end,
--             -- })
--         end,
--     },
--
--     -- {
--     --     "jedrzejboczar/possession.nvim",
--     --     dependencies = { "nvim-lua/plenary.nvim" },
--     --     enabled = false,
--     --     config = function()
--     --         require("possession").setup({
--     --             load_silent = true,
--     --             autoload = function()
--     --                 return true
--     --             end,
--     --             autosave = {
--     --                 current = true, -- or fun(name): boolean
--     --                 cwd = true, -- or fun(): boolean
--     --                 tmp = false, -- or fun(): boolean
--     --                 -- tmp_name = "tmp", -- or fun(): string
--     --                 -- on_load = true,
--     --                 -- on_quit = true,
--     --             },
--     --             telescope = {
--     --                 list = {
--     --                     default_action = "load",
--     --                 },
--     --             },
--     --             hooks = {
--     --                 after_load = function(name, user_data)
--     --                     require("neo-tree.command").execute({
--     --                         toggle = false,
--     --                         reveal = true,
--     --                     })
--     --                 end,
--     --                 -- before_save = function(name) end,
--     --             },
--     --             plugins = {
--     --                 nvim_tree = false,
--     --                 neo_tree = true,
--     --             },
--     --         })
--     --     end,
--     -- },
-- }
