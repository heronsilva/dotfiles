- defaults:
    link:
      create: true
      relink: true

- clean: ["~"]

- link:
    # shell
    ~/.bashrc:
      path: home/.bashrc
      force: true
    ~/.bash_aliases: home/.bash_aliases

    ~/.zsh:
      force: true
      path: home/.zsh
    ~/.zshrc:
      force: true
      path: home/.zsh/.zshrc
    ~/.p10k.zsh:
      force: true
      path: .p10k.zsh

    # terminal emulators
    ~/.config/alacritty:
      create: true
      path: home/.config/alacritty
    ~/.config/wezterm:
      create: true
      path: home/.config/wezterm

    # vim
    ~/.vimrc: home/.vimrc
    ~/.ideavimrc: home/.ideavimrc
    ~/.config/nvim:
      create: true
      path: home/.config/nvim

    # scripts
    ~/.local/bin/yt-wpp: scripts/yt-wpp.sh

    # in case of deleting ~/.config/nvim, use this to relink:
    # mv ~/.config/nvim .config/
    # ln -s ~/Workbench/dotfiles/.config/nvim ~/.config/nvim
    # ls -l ~/.config | grep nvim # check if it was succesfully linked

    ~/.config/mise:
      create: true
      path: ./home/.config/mise
    ~/.gitconfig: home/.gitconfig
    ~/.inputrc: .inputrc
    ~/.tmux.conf: home/.tmux.conf
    ~/.Brewfile:
      if: '[ `uname` = Darwin ]'
      path: home/Brewfile
    ~/.finicky.ts:
      if: '[ `uname` = Darwin ]'
      path: home/finicky.ts

- create:
    - ~/Workbench
    - ~/.vim/undodir

- shell:
    - [git submodule update --init --recursive, Installing submodules]

    - description: install vim plug
      command: |
        curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    - description: "Compile copyfile.swift"
      command: |
        if [[ "$(uname)" == "Darwin" ]]; then
          swiftc ./bin/copyfile.swift -o ./bin/copyfile
        fi

    - description: "Link copyfile to ~/.local/bin"
      command: |
        if [[ "$(uname)" == "Darwin" && -f ./bin/copyfile ]]; then
          ln -sf "$(pwd)/bin/copyfile" ~/.local/bin/copyfile
        fi

    - description: "Install Homebrew packages"
      command: |
        if [[ "$(uname)" == "Darwin" && -x "$(command -v brew)" ]]; then
          brew bundle --file ./home/Brewfile
        fi

    - description: "Install Linux packages (Ubuntu/Debian)"
      command: |
        if [[ "$(uname)" == "Linux" && -f /etc/debian_version ]]; then
          echo "Installing packages for Ubuntu/Debian..."

          # Update package list
          sudo apt update

          # Install packages from list (skip comments and empty lines)
          # Use || true to continue even if some packages fail
          grep -v '^#' ./home/packages-apt.txt | grep -v '^$' | while read package; do
            echo "Installing $package..."
            sudo apt install -y "$package" || echo "Failed to install $package, anyways..."
          done
        fi

    - description: "Install Linux packages (Fedora/RHEL/CentOS)"
      command: |
        if [[ "$(uname)" == "Linux" && -f /etc/redhat-release ]]; then
          echo "Installing packages for Fedora/RHEL/CentOS..."

          # Update package list
          sudo dnf update

          # Install packages from list (skip comments and empty lines)
          grep -v '^#' ./home/packages-dnf.txt | grep -v '^$' | while read package; do
            echo "Installing $package..."
            sudo dnf install -y "$package" || echo "Failed to install $package, anyways..."
          done
        fi

    - description: "Install Linux packages (Arch/Manjaro)"
      command: |
        if [[ "$(uname)" == "Linux" && -f /etc/arch-release ]]; then
          echo "Installing packages for Arch/Manjaro..."

          # Update package database
          sudo pacman -Sy

          # Install packages from list (skip comments and empty lines)
          grep -v '^#' ./home/packages-pacman.txt | grep -v '^$' | while read package; do
            echo "Installing $package..."
            sudo pacman -S --noconfirm "$package" || echo "Failed to install $package, anyways..."
          done
        fi

    - description: "Install mise"
      command: |
        if ! command -v mise >/dev/null 2>&1; then
          echo "Installing mise..."

          curl https://mise.run | sh

          # Add mise to PATH for current session
          export PATH="$HOME/.local/bin:$PATH"

          # Verify installation
          if command -v mise >/dev/null 2>&1; then
            echo "mise installed successfully"
            echo "Installing mise tools..."

            mise install
          else
            echo "mise installation may have failed, but anyways..."
          fi
        else
          echo "mise is already installed, skipping..."
        fi

    - description: "Configure PM2 logrotate"
      command: "sh ./scripts/pm2-logrotate.sh"
